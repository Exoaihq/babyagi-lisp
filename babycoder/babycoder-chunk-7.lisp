(defun select-file-to-edit ()
  (let* ((current-directory-files (execute-command-string "ls"))
         (file-management-output (file-management-agent OBJECTIVE task-description current-directory-files task-file-path))
         (file-path (json-parse file-management-output :key-type 'string :object-type 'plist :null-object nil))
         (code-chunks (split-code-into-chunks file-path 80))
         (relevance-scores (mapcar #'(lambda (chunk) (code-relevance-agent OBJECTIVE task-description chunk-code)) code-chunks))
         (selected-chunk (second (car (sort (mapcar #'cons relevance-scores code-chunks) #'> :key #'car))))
         (modified-code-output (code-refactor-agent task-description selected-chunk :context-chunks (list selected-chunk) :isolated-context task-isolated-context))
         (start-line (getf selected-chunk :start-line))
         (end-line (getf selected-chunk :end-line))
         (modified-code-lines (+ (count #\Newline modified-code-output) 1))
         (modified-code-info (list :start-line start-line :end-line (+ start-line modified-code-lines -1) :modified-code modified-code-output)))
    (print-colored-text "*****FILE MANAGEMENT*****" "yellow")
    (print-char-by-char file-management-output)
    (print-colored-text "*****ANALYZING EXISTING CODE*****" "yellow")
    (print-colored-text "*****REFACTORED CODE*****" "green")
    (print-char-by-char modified-code-output)
    (refactor-code (list modified-code-info) file-path)))