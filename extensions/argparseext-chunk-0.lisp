(defun can-import (module-name)
  (handler-case
      (progn
        (asdf:load-system module-name)
        t)
    (asdf:missing-component () nil)))

(defun parse-dotenv-extensions (argv)
  (let ((env-argv '())
        (tmp-argv '())
        (parsed-args '()))
    (when (member "-e" argv :test #'string=)
      (setf tmp-argv (subseq argv (1+ (position "-e" argv :test #'string=))))
      (loop for arg in tmp-argv
            until (string-left-trim "-" arg)
            do (push arg parsed-args))
      (setf env-argv (cons "-e" parsed-args)))
    (let ((parser (make-instance 'argparse:parser)))
      (argparse:add-argument parser "-e" "--env" :nargs '+ :help "filenames for additional env variables to load" :default (uiop:getenv "DOTENV_EXTENSIONS"))
      (argparse:parse-args parser env-argv))))

(defun parse-arguments ()
  (let* ((dotenv-extensions (parse-dotenv-extensions uiop:*command-line-arguments*))
         (objective (uiop:getenv "OBJECTIVE"))
         (instance-name (uiop:getenv "INSTANCE_NAME"))
         (baby-name (uiop:getenv "BABY_NAME"))
         (initial-task (uiop:getenv "INITIAL_TASK"))
         (first-task (uiop:getenv "FIRST_TASK"))
         (llm-model (uiop:getenv "LLM_MODEL"))
         (openai-api-model (uiop:getenv "OPENAI_API_MODEL")))
    (when dotenv-extensions
      (load-dotenv-extensions dotenv-extensions))
    (let ((parser (make-instance 'argparse:parser :add-help nil)))
      (argparse:add-argument parser "objective" :nargs '* :metavar "<objective>" :help "main objective description. Doesn't need to be quoted. if not specified, get objective from environment." :default (list objective))
      (argparse:add-argument parser "-n" "--name" :required nil :help "instance name. if not specified, get the instance name from environment." :default (or instance-name baby-name "BabyAGI"))
      (argparse:add-argument parser "-m" "--mode" :choices '("n" "none" "l" "local" "d" "distributed") :help "cooperative mode type" :default "none")
      (argparse:add-argument parser "-t" "--task" :metavar "<initial task>" :help "initial task description. must be quoted. if not specified, get initial_task from environment." :default (or initial-task first-task ""))
      (argparse:add-argument parser "-j" "--join" :action 'store-true :help "join an existing objective. install cooperative requirements.")
      (argparse:add-argument parser "-4" "--gpt-4" :dest 'llm-model :action 'store-const :const "gpt-4" :help "use GPT-4 instead of the default model.")
      (argparse:add-argument parser "-l" "--llama" :dest 'llm-model :action 'store-const :const "llama" :help "use LLaMa instead of the default model. Requires llama.cpp.")
      (argparse:add-argument parser "-e" "--env" :nargs '+ :help "filenames for additional env variables to load" :default (uiop:getenv "DOTENV_EXTENSIONS"))
      (argparse:add-argument parser "-h" "-?" "--help" :action 'help :help "show this help message and exit")
      (let ((args (argparse:parse-args parser)))
        (list (argparse:get-arg args "objective")
              (argparse:get-arg args "-t")
              (argparse:get-arg args "-n")
              (argparse:get-arg args "-m")
              (argparse:get-arg args "-j")
              (argparse:get-arg args "-4")
              (argparse:get-arg args "-l")
              (argparse:get-arg args "-e")))))