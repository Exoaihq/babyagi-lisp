(defun openai-call (prompt)
  (let ((api-key "your-api-key")
        (url "https://api.openai.com/v1/engines/davinci-codex/completions")
        (headers '(("Content-Type" . "application/json")
                   ("Authorization" . ,(concat "Bearer " api-key))))
        (data (json-encode `(("prompt" . ,prompt)
                             ("max_tokens" . 200)
                             ("n" . 1)
                             ("stop" . ("\\n"))
                             ("temperature" . 0.5)))))
    (with-current-buffer (url-retrieve-synchronously url t t)
      (goto-char (point-min))
      (re-search-forward "^$")
      (delete-region (point) (point-min))
      (let ((result (json-read)))
        (cdr (assoc 'text (aref (cdr (assoc 'choices result)) 0)))))))

(defun context-agent (query top-results-num)
  (let ((prompt (format "Find the top %d most relevant pieces of information for the following query: %s\n\nRelevant information:\n" top-results-num query)))
    (openai-call prompt)))

(defun task-creation-agent (objective result task-description task-list)
  (let ((prompt (format "You are to use the result from an execution agent to create new tasks with the following objective: %s.\nThe last completed task has the result: \n%s\nThis result was based on this task description: %s.\n" objective result task-description)))
    (when task-list
      (setq prompt (concat prompt (format "These are incomplete tasks: %s\n" (string-join task-list ", ")))))
    (setq prompt (concat prompt "Based on the result, return a list of tasks to be completed in order to meet the objective. "))
    (when task-list
      (setq prompt (concat prompt "These new tasks must not overlap with incomplete tasks. ")))
    (setq prompt (concat prompt "\nReturn one task per line in your response. The result must be a numbered list in the format:\n\n#. First task\n#. Second task\n\nThe number of each entry must be followed by a period. If your list is empty, write \"There are no tasks to add at this time.\"\nUnless your list is empty, do not include any headers before your numbered list or follow your numbered list with any other output."))
    (let ((response (openai-call prompt))
          (new-tasks-list '()))
      (dolist (task-string (split-string response "\n"))
        (let* ((task-parts (split-string task-string "\\." t))
               (task-id (string-to-number (car task-parts)))
               (task-name (string-trim (cadr task-parts))))
          (when (and task-name (> (length task-name) 0) (> task-id 0))
            (push task-name new-tasks-list))))
      (reverse new-tasks-list))))

(defun execution-agent (objective task)
  (let ((context (context-agent query=objective top-results-num=5))
        (prompt (format "Perform one task based on the following objective: %s.\n" objective)))
    (when context
      (setq prompt (concat prompt context)))
    (setq prompt (concat prompt (format "\nTask: %s\n\nResponse:" task)))
    (openai-call prompt)))